// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package db

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/CrazyGang97/go-clean-arch/internal/infra/db/model"
)

func newUserPO(db *gorm.DB, opts ...gen.DOOption) userPO {
	_userPO := userPO{}

	_userPO.userPODo.UseDB(db, opts...)
	_userPO.userPODo.UseModel(&model.UserPO{})

	tableName := _userPO.userPODo.TableName()
	_userPO.ALL = field.NewAsterisk(tableName)
	_userPO.ID = field.NewInt64(tableName, "id")
	_userPO.Name = field.NewString(tableName, "name")
	_userPO.Age = field.NewInt32(tableName, "age")

	_userPO.fillFieldMap()

	return _userPO
}

type userPO struct {
	userPODo userPODo

	ALL  field.Asterisk
	ID   field.Int64
	Name field.String
	Age  field.Int32

	fieldMap map[string]field.Expr
}

func (u userPO) Table(newTableName string) *userPO {
	u.userPODo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPO) As(alias string) *userPO {
	u.userPODo.DO = *(u.userPODo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPO) updateTableName(table string) *userPO {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.Name = field.NewString(table, "name")
	u.Age = field.NewInt32(table, "age")

	u.fillFieldMap()

	return u
}

func (u *userPO) WithContext(ctx context.Context) *userPODo { return u.userPODo.WithContext(ctx) }

func (u userPO) TableName() string { return u.userPODo.TableName() }

func (u userPO) Alias() string { return u.userPODo.Alias() }

func (u userPO) Columns(cols ...field.Expr) gen.Columns { return u.userPODo.Columns(cols...) }

func (u *userPO) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPO) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["name"] = u.Name
	u.fieldMap["age"] = u.Age
}

func (u userPO) clone(db *gorm.DB) userPO {
	u.userPODo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPO) replaceDB(db *gorm.DB) userPO {
	u.userPODo.ReplaceDB(db)
	return u
}

type userPODo struct{ gen.DO }

func (u userPODo) Debug() *userPODo {
	return u.withDO(u.DO.Debug())
}

func (u userPODo) WithContext(ctx context.Context) *userPODo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPODo) ReadDB() *userPODo {
	return u.Clauses(dbresolver.Read)
}

func (u userPODo) WriteDB() *userPODo {
	return u.Clauses(dbresolver.Write)
}

func (u userPODo) Session(config *gorm.Session) *userPODo {
	return u.withDO(u.DO.Session(config))
}

func (u userPODo) Clauses(conds ...clause.Expression) *userPODo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPODo) Returning(value interface{}, columns ...string) *userPODo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPODo) Not(conds ...gen.Condition) *userPODo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPODo) Or(conds ...gen.Condition) *userPODo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPODo) Select(conds ...field.Expr) *userPODo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPODo) Where(conds ...gen.Condition) *userPODo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPODo) Order(conds ...field.Expr) *userPODo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPODo) Distinct(cols ...field.Expr) *userPODo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPODo) Omit(cols ...field.Expr) *userPODo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPODo) Join(table schema.Tabler, on ...field.Expr) *userPODo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPODo) LeftJoin(table schema.Tabler, on ...field.Expr) *userPODo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPODo) RightJoin(table schema.Tabler, on ...field.Expr) *userPODo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPODo) Group(cols ...field.Expr) *userPODo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPODo) Having(conds ...gen.Condition) *userPODo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPODo) Limit(limit int) *userPODo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPODo) Offset(offset int) *userPODo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPODo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userPODo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPODo) Unscoped() *userPODo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPODo) Create(values ...*model.UserPO) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPODo) CreateInBatches(values []*model.UserPO, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPODo) Save(values ...*model.UserPO) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPODo) First() (*model.UserPO, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPO), nil
	}
}

func (u userPODo) Take() (*model.UserPO, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPO), nil
	}
}

func (u userPODo) Last() (*model.UserPO, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPO), nil
	}
}

func (u userPODo) Find() ([]*model.UserPO, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPO), err
}

func (u userPODo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPO, err error) {
	buf := make([]*model.UserPO, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPODo) FindInBatches(result *[]*model.UserPO, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPODo) Attrs(attrs ...field.AssignExpr) *userPODo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPODo) Assign(attrs ...field.AssignExpr) *userPODo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPODo) Joins(fields ...field.RelationField) *userPODo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPODo) Preload(fields ...field.RelationField) *userPODo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPODo) FirstOrInit() (*model.UserPO, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPO), nil
	}
}

func (u userPODo) FirstOrCreate() (*model.UserPO, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPO), nil
	}
}

func (u userPODo) FindByPage(offset int, limit int) (result []*model.UserPO, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPODo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPODo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPODo) Delete(models ...*model.UserPO) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPODo) withDO(do gen.Dao) *userPODo {
	u.DO = *do.(*gen.DO)
	return u
}
